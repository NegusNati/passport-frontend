/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as CalendarRouteImport } from './routes/calendar'
import { Route as ArticlesRouteImport } from './routes/articles'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PassportsIndexRouteImport } from './routes/passports/index'
import { Route as PassportsPassportIdRouteImport } from './routes/passports/$passportId'
import { Route as ArticlesSlugRouteImport } from './routes/articles/$slug'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarRoute = CalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesRoute = ArticlesRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PassportsIndexRoute = PassportsIndexRouteImport.update({
  id: '/passports/',
  path: '/passports/',
  getParentRoute: () => rootRouteImport,
} as any)
const PassportsPassportIdRoute = PassportsPassportIdRouteImport.update({
  id: '/passports/$passportId',
  path: '/passports/$passportId',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesSlugRoute = ArticlesSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => ArticlesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteWithChildren
  '/calendar': typeof CalendarRoute
  '/test': typeof TestRoute
  '/articles/$slug': typeof ArticlesSlugRoute
  '/passports/$passportId': typeof PassportsPassportIdRoute
  '/passports': typeof PassportsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteWithChildren
  '/calendar': typeof CalendarRoute
  '/test': typeof TestRoute
  '/articles/$slug': typeof ArticlesSlugRoute
  '/passports/$passportId': typeof PassportsPassportIdRoute
  '/passports': typeof PassportsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteWithChildren
  '/calendar': typeof CalendarRoute
  '/test': typeof TestRoute
  '/articles/$slug': typeof ArticlesSlugRoute
  '/passports/$passportId': typeof PassportsPassportIdRoute
  '/passports/': typeof PassportsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/articles'
    | '/calendar'
    | '/test'
    | '/articles/$slug'
    | '/passports/$passportId'
    | '/passports'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/articles'
    | '/calendar'
    | '/test'
    | '/articles/$slug'
    | '/passports/$passportId'
    | '/passports'
  id:
    | '__root__'
    | '/'
    | '/articles'
    | '/calendar'
    | '/test'
    | '/articles/$slug'
    | '/passports/$passportId'
    | '/passports/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArticlesRoute: typeof ArticlesRouteWithChildren
  CalendarRoute: typeof CalendarRoute
  TestRoute: typeof TestRoute
  PassportsPassportIdRoute: typeof PassportsPassportIdRoute
  PassportsIndexRoute: typeof PassportsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/passports/': {
      id: '/passports/'
      path: '/passports'
      fullPath: '/passports'
      preLoaderRoute: typeof PassportsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/passports/$passportId': {
      id: '/passports/$passportId'
      path: '/passports/$passportId'
      fullPath: '/passports/$passportId'
      preLoaderRoute: typeof PassportsPassportIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles/$slug': {
      id: '/articles/$slug'
      path: '/$slug'
      fullPath: '/articles/$slug'
      preLoaderRoute: typeof ArticlesSlugRouteImport
      parentRoute: typeof ArticlesRoute
    }
  }
}

interface ArticlesRouteChildren {
  ArticlesSlugRoute: typeof ArticlesSlugRoute
}

const ArticlesRouteChildren: ArticlesRouteChildren = {
  ArticlesSlugRoute: ArticlesSlugRoute,
}

const ArticlesRouteWithChildren = ArticlesRoute._addFileChildren(
  ArticlesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArticlesRoute: ArticlesRouteWithChildren,
  CalendarRoute: CalendarRoute,
  TestRoute: TestRoute,
  PassportsPassportIdRoute: PassportsPassportIdRoute,
  PassportsIndexRoute: PassportsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
